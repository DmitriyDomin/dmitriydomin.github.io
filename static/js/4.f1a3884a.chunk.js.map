{"version":3,"sources":["components/MovieList/MovieComponent/MovieComponent.js","components/MovieList/MovieList.js","components/Button/Button.js","components/Preview/Preview.js","pages/Main/Main.js"],"names":["MovieComponent","props","history","useHistory","useState","showMovie","setShowMovie","selectClasses","setClasses","inWatchList","dispatch","useDispatch","useEffect","setSelectClasses","filter","className","slice","in","timeout","classNames","elementClass","unmountOnExit","style","backgroundImage","image","onClick","push","id","name","rating","description","join","e","stopPropagation","actions","MovieList","watchList","useSelector","state","movies","console","log","map","movie","imageSrc","find","movieInList","classes","isRecent","length","title","component","Browse","children","Preview","showPreview","setShowPreview","timer","setTimer","preview","setPreview","clearInterval","setTimeout","interval","setInterval","changePreview","TimeToChange","movieId","getRandomArbitrary","Movies","min","max","current","result","Math","ceil","floor","random","src","alt","connect","TrendingMovies","MostWatched","TopMovies"],"mappings":"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","file":"static/js/4.f1a3884a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport './MovieComponent.scss'\r\nimport * as actions from \"../../../store/actions\";\r\nimport CSSTransition from \"react-transition-group/cjs/CSSTransition\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst MaxRating = 10;\r\n\r\nconst MovieComponent = (props) => {\r\n\r\n  const history = useHistory();\r\n\r\n  const [showMovie, setShowMovie] = useState(false);\r\n\r\n  const [selectClasses, setClasses] = useState(['Movie-Select']);\r\n  const { inWatchList } = props;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    setSelectClasses();\r\n  }, [inWatchList]);\r\n\r\n  const setSelectClasses = () => {\r\n    setShowMovie(true);\r\n    if (inWatchList) {\r\n      setClasses([...selectClasses, 'Active']);\r\n    } else {\r\n      selectClasses.filter(className => className !== 'Active');\r\n      setClasses(selectClasses.filter(className => className !== 'Active').slice());\r\n    }\r\n  }\r\n\r\n  const onMovieAdded = (e) => {\r\n    e.stopPropagation();\r\n    if (!inWatchList) {\r\n      dispatch(actions.addMovie(props.id));\r\n    } else {\r\n      setShowMovie(false);\r\n      dispatch(actions.removeMovie(props.id));\r\n    }\r\n  }\r\n\r\n  const toMovie = () => {\r\n    history.push(`/movie?movieId=${props.id}`);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <CSSTransition\r\n        in={ showMovie }\r\n        timeout={200}\r\n        classNames={ props.elementClass }\r\n        unmountOnExit\r\n      >\r\n        <div className='Movie-component' style={{ backgroundImage: `url(${props.image})` }} onClick={ toMovie }>\r\n          <div className=\"Movie-container\">\r\n            <div className=\"Movie-Title\">{ props.name }</div>\r\n            <div className=\"Movie-Rating\">{ props.rating } / { MaxRating }</div>\r\n            <div className=\"Movie-Description\">{ props.description }</div>\r\n            <div className={ selectClasses.join(' ') } onClick={ onMovieAdded }> </div>\r\n          </div>\r\n        </div>\r\n      </CSSTransition>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieComponent;\r\n","import React, {useEffect, useState} from 'react';\r\nimport MovieComponent from \"./MovieComponent/MovieComponent\";\r\nimport './MovieList.scss'\r\nimport {useSelector} from \"react-redux\";\r\nimport CSSTransition from \"react-transition-group/cjs/CSSTransition\";\r\nimport { TransitionGroup } from 'react-transition-group';\r\n\r\nconst MovieList = props => {\r\n\r\n  const watchList = useSelector(state => {\r\n    return state.watchList.movies;\r\n  });\r\n\r\n  const elementClass = props.elementClass || '';\r\n\r\n  console.log(props.movies);\r\n  const movies = props.movies.map(movie => {\r\n    return (\r\n        <CSSTransition\r\n          key={movie.id}\r\n          timeout={500}\r\n          classNames=\"item\"\r\n        >\r\n          <div className=\"Movie\">\r\n            <MovieComponent\r\n              name = { movie.name }\r\n              rating = { movie.rating }\r\n              description = { movie.description }\r\n              image = { movie.imageSrc }\r\n              id = { movie.id }\r\n              inWatchList = { !!watchList.find(movieInList => movieInList.id === movie.id) }\r\n              elementClass = { elementClass }\r\n            >\r\n            </MovieComponent>\r\n          </div>\r\n        </CSSTransition>\r\n      )\r\n    }\r\n  );\r\n\r\n  const classes = [\"Movie-list\"];\r\n  if (props.isRecent) classes.push('Recent');\r\n\r\n  const renderData = movies.length\r\n  ? (\r\n      <div className={ classes.join(' ') }>\r\n        <h2 className='Title'>\r\n          { props.title }\r\n        </h2>\r\n        <TransitionGroup className=\"List\" component='div'>\r\n          { movies }\r\n        </TransitionGroup>\r\n      </div>\r\n    )\r\n  : null;\r\n\r\n\r\n  return (\r\n    renderData\r\n  );\r\n}\r\n\r\nexport default MovieList;\r\n","import React from 'react';\r\nimport './Button.scss'\r\n\r\nconst Browse = props => {\r\n  return (\r\n    <div className='Button'>\r\n      { props.children }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Browse;\r\n","import React, {useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport Button from \"../Button/Button\";\r\nimport './Preview.scss'\r\nimport * as actions from '../../store/actions'\r\nimport {Movies} from \"../../store/mockBD/movies\";\r\nimport CSSTransition from \"react-transition-group/cjs/CSSTransition\";\r\n\r\nconst TimeToChange = 10;\r\n\r\nconst Preview = props => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useHistory();\r\n\r\n  const [showPreview, setShowPreview] = useState(false);\r\n\r\n  const [timer, setTimer] = useState(null);\r\n\r\n  let preview = useSelector(state => {\r\n    return state.watchList.preview;\r\n  })\r\n\r\n  useEffect(() => {\r\n    setPreview();\r\n  }, [preview]);\r\n\r\n  useEffect(() => {\r\n    return (e) => {\r\n      clearInterval(timer);\r\n    };\r\n  },[timer]);\r\n\r\n  const setPreview = () => {\r\n    if (timer) clearInterval(timer);\r\n    setTimeout(() => {\r\n      setShowPreview(true);\r\n    }, 300);\r\n    const interval = setInterval(() => {\r\n      changePreview()\r\n    }, TimeToChange * 1000);\r\n    setTimer(interval);\r\n  }\r\n\r\n  const changePreview = () => {\r\n    setShowPreview(false);\r\n    setTimeout(() => {\r\n      const movieId = getRandomArbitrary(0, Movies.length, preview.id);\r\n      dispatch(actions.changePreview(movieId));\r\n    }, 300);\r\n  }\r\n\r\n  const getRandomArbitrary = (min, max, current) => {\r\n    let result = current;\r\n    while (result === current) {\r\n      min = Math.ceil(min);\r\n      max = Math.floor(max);\r\n      result = Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  const onMovieAdded = () => {\r\n    changePreview();\r\n    dispatch(actions.addMovie(preview.id));\r\n  }\r\n\r\n  const toMovie = () => {\r\n    history.push(`/movie?movieId=${preview.id}`);\r\n    changePreview();\r\n  }\r\n\r\n  return (\r\n    <div className='Preview-container'>\r\n    <CSSTransition\r\n      in={ showPreview }\r\n      timeout={300}\r\n      unmountOnExit\r\n      classNames='Preview-item'\r\n    >\r\n      <div className=\"Preview\">\r\n        <div className=\"Content-container\">\r\n          <h2 className=\"Title\">\r\n            { preview.title }\r\n          </h2>\r\n          <div className=\"Description\">\r\n            { preview.description }\r\n          </div>\r\n          <div className=\"Button-container\">\r\n        <span className=\"Watch-now\" onClick={ toMovie }>\r\n          <Button>\r\n            Watch now\r\n          </Button>\r\n        </span>\r\n        <span className=\"My-list-button\" onClick={ onMovieAdded }>\r\n           <Button>\r\n             + My list\r\n           </Button>\r\n        </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"Image-container\">\r\n          <img src={ preview.imageSrc } alt=\"\"/>\r\n        </div>\r\n      </div>\r\n    </CSSTransition>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Preview;\r\n\r\n","import React from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Preview from \"../../components/Preview/Preview\";\r\nimport { Movies, TrendingMovies, MostWatched, TopMovies } from '../../store/mockBD/movies';\r\nimport MovieList from '../../components/MovieList/MovieList';\r\n\r\nconst Main = props => {\r\n\r\n  return (\r\n    <div>\r\n      <Preview movie={ Movies[0] }>\r\n      </Preview>\r\n      <MovieList\r\n        movies = { TrendingMovies.slice() }\r\n        title = 'Trending now'\r\n      >\r\n      </MovieList>\r\n      <MovieList\r\n        movies = { MostWatched.slice() }\r\n        title = 'Most Watched'\r\n      >\r\n      </MovieList>\r\n      <MovieList\r\n        movies = { TopMovies.slice() }\r\n        title = 'Best reviews'\r\n      >\r\n      </MovieList>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    movies: state.movies,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Main);\r\n"],"sourceRoot":""}